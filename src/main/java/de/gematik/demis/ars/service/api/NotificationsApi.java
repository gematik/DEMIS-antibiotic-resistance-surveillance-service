/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * (7.14.0). https://openapi-generator.tech Do not edit the class manually.
 */
package de.gematik.demis.ars.service.api;

/*-
 * #%L
 * Antibiotic-Resistance-Surveillance-Service
 * %%
 * Copyright (C) 2025 gematik GmbH
 * %%
 * Licensed under the EUPL, Version 1.2 or - as soon they will be approved by the
 * European Commission â€“ subsequent versions of the EUPL (the "Licence").
 * You may not use this work except in compliance with the Licence.
 *
 * You find a copy of the Licence in the "Licence" file or at
 * https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either expressed or implied.
 * In case of changes by gematik find details in the "Readme" file.
 *
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *
 * *******
 *
 * For additional notes and disclaimer from gematik and in case of changes by gematik find details in the "Readme" file.
 * #L%
 */

import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.WebRequest;

@Generated(
    value = "org.openapitools.codegen.languages.SpringCodegen",
    date = "2025-08-05T17:25:05.601689573+02:00[Europe/Berlin]",
    comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "notifications", description = "the notifications API")
public interface NotificationsApi {

  /**
   * POST /fhir/$process-notification : Create a disease notification that will be send to the
   * specified target
   *
   * @param authorization (required)
   * @param contentType Tells whether the request body is in JSON or XML format. (required)
   * @param body (required)
   * @return Successful request. (status code 200) or The request will not be processed due to a
   *     client error. (status code 400) or The request will not be processed due to invalid
   *     authentication credentials. (status code 401) or The request will not be processed due to
   *     insufficient rights. (status code 403) or The server is unwilling to process the content
   *     (honeypot case). (status code 406) or No or wrong content-type provided. (status code 415)
   *     or The server understands the content type of the request entity, but it was unable to
   *     process the contained instructions (status code 422) or The server encountered an
   *     unexpected condition that prevented it from fulfilling the request. (status code 500)
   */
  @RequestMapping(
      method = RequestMethod.POST,
      value = "${ars.context-path}$process-notification",
      produces = {"application/json", "application/xml"},
      consumes = {"application/json", "application/xml"})
  ResponseEntity<Object> fhirProcessNotificationPost(
      @NotNull
          @Parameter(
              name = "Authorization",
              description = "",
              required = true,
              in = ParameterIn.HEADER)
          @RequestHeader(value = "Authorization", required = true)
          String authorization,
      @NotNull
          @Parameter(
              name = "Content-Type",
              description = "Tells whether the request body is in JSON or XML format.",
              required = true,
              in = ParameterIn.HEADER)
          @RequestHeader(value = "Content-Type", required = true)
          String contentType,
      @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body,
      WebRequest webRequest);
}
